


import torch
import torch.utils.data as data
import cv2
import glob
import pandas as pd


# 字母标记名称(文件夹名字）
defect_label_order = ["其他垃圾一次性快餐盒","其他垃圾污损塑料","其他垃圾烟蒂", "其他垃圾牙签","其他垃圾破碎花盆及碟碗","其他垃圾竹筷",
"厨余垃圾剩饭剩菜", "厨余垃圾大骨头", "厨余垃圾水果果皮", "厨余垃圾水果果肉", "厨余垃圾茶叶渣", "厨余垃圾菜叶菜根", "厨余垃圾蛋壳","厨余垃圾鱼骨",
"可回收物充电宝", "可回收物包","可回收物化妆品瓶", "可回收物塑料玩具","可回收物塑料碗盆", "可回收物塑料衣架",
"可回收物快递纸袋", "可回收物插头电线", "可回收物旧衣服", "可回收物易拉罐",
"可回收物枕头","可回收物毛绒玩具","可回收物洗发水瓶","可回收物玻璃杯",
"可回收物皮鞋", "可回收物砧板", "可回收物纸板箱","可回收物调料瓶",
"可回收物酒瓶", "可回收物金属食品罐","可回收物锅", "可回收物食用油桶", "可回收物饮料瓶",
"有害垃圾干电池", "有害垃圾软膏","有害垃圾过期药物" ]
# 与字母标记一一对应(类别名字）
defect_code = {
    "其他垃圾一次性快餐盒": "其他垃圾一次性快餐盒",
    "其他垃圾污损塑料":"其他垃圾污损塑料",
    "其他垃圾烟蒂":"其他垃圾烟蒂",
    "其他垃圾牙签":"其他垃圾牙签",
    "其他垃圾破碎花盆及碟碗":"其他垃圾破碎花盆及碟碗",
    "其他垃圾竹筷":"其他垃圾竹筷",
    "厨余垃圾剩饭剩菜":"厨余垃圾剩饭剩菜",
    "厨余垃圾大骨头":"厨余垃圾大骨头",
    "厨余垃圾水果果皮":"厨余垃圾水果果皮",
    "厨余垃圾水果果肉":"厨余垃圾水果果肉",
    "厨余垃圾茶叶渣":"厨余垃圾茶叶渣",
    "厨余垃圾菜叶菜根":"厨余垃圾菜叶菜根",
    "厨余垃圾蛋壳":"厨余垃圾蛋壳",
    "厨余垃圾鱼骨":"厨余垃圾鱼骨",
    "可回收物充电宝":"可回收物充电宝",
    "可回收物包":"可回收物包",
    "可回收物化妆品瓶":"可回收物化妆品瓶",
    "可回收物塑料玩具":"可回收物塑料玩具",
    "可回收物塑料碗盆":"可回收物塑料碗盆",
    "可回收物塑料衣架":"可回收物塑料衣架",
    "可回收物快递纸袋":"可回收物快递纸袋",
    "可回收物插头电线":"可回收物插头电线",
    "可回收物旧衣服":"可回收物旧衣服",
    "可回收物易拉罐":"可回收物易拉罐",
    "可回收物枕头":"可回收物枕头",
    "可回收物毛绒玩具":"可回收物毛绒玩具",
    "可回收物洗发水瓶":"可回收物洗发水瓶",
    "可回收物玻璃杯":"可回收物玻璃杯",
    "可回收物皮鞋":"可回收物皮鞋",
    "可回收物砧板":"可回收物砧板",
    "可回收物纸板箱":"可回收物纸板箱",
    "可回收物调料瓶":"可回收物调料瓶",
    "可回收物酒瓶":"可回收物酒瓶",
    "可回收物金属食品罐":"可回收物金属食品罐",
    "可回收物锅":"可回收物锅",
    "可回收物食用油桶":"可回收物食用油桶",
    "可回收物饮料瓶":"可回收物饮料瓶",
    "有害垃圾干电池":"有害垃圾干电池",
    "有害垃圾软膏":"有害垃圾软膏",
    "有害垃圾过期药物":"有害垃圾过期药物"
}
# 与数字标记一一对应(类别与数字标签一一对应）
defect_label = {
    "其他垃圾一次性快餐盒": "0",
    "其他垃圾污损塑料": "1",
    "其他垃圾烟蒂": "2",
    "其他垃圾牙签": "3",
    "其他垃圾破碎花盆及碟碗": "4",
    "其他垃圾竹筷": "5",
    "厨余垃圾剩饭剩菜": "6",
    "厨余垃圾大骨头": "7",
    "厨余垃圾水果果皮": "8",
    "厨余垃圾水果果肉": "9",
    "厨余垃圾茶叶渣": "10",
    "厨余垃圾菜叶菜根": "11",
    "厨余垃圾蛋壳": "12",
    "厨余垃圾鱼骨": "13",
    "可回收物充电宝": "14",
    "可回收物包": "15",
    "可回收物化妆品瓶": "16",
    "可回收物塑料玩具": "17",
    "可回收物塑料碗盆": "18",
    "可回收物塑料衣架": "19",
    "可回收物快递纸袋": "20",
    "可回收物插头电线": "21",
    "可回收物旧衣服": "22",
    "可回收物易拉罐": "23",
    "可回收物枕头": "24",
    "可回收物毛绒玩具": "25",
    "可回收物洗发水瓶": "26",
    "可回收物玻璃杯": "27",
    "可回收物皮鞋": "28",
    "可回收物砧板": "29",
    "可回收物纸板箱": "30",
    "可回收物调料瓶": "31",
    "可回收物酒瓶": "32",
    "可回收物金属食品罐": "33",
    "可回收物锅": "34",
    "可回收物食用油桶": "35",
    "可回收物饮料瓶": "36",
    "有害垃圾干电池": "37",
    "有害垃圾软膏": "38",
    "有害垃圾过期药物": "39"
}


# 用字典存储类别名字和数字标记
label2defect_map = dict(zip(defect_label.values(), defect_label.keys()))

# 获取图片路径
def get_image_pd(img_root):  # img-root = '/media/by/Udata/Datasets/垃圾分类'
    # 利用glob指令获取图片列表（/*的个数根据文件构成确定）获取完整路径
    img_list = glob.glob(img_root + "/*/*.jpg")
    print(img_list)
    # 利用DataFrame指令构建图片列表的字典，即图片列表的序号与其路径一一对应
    image_pd = pd.DataFrame(img_list, columns=["ImageName"])
    # 获取文件夹名称，也可以认为是标签名称
    image_pd["label_name"]=image_pd["ImageName"].apply(lambda x:x.split("/")[-2])
    # 将标签名称转化为数字标记
    image_pd["label"]=image_pd["label_name"].apply(lambda x:defect_label[x])
    # print(image_pd["label"].value_counts())
    # print(image_pd)
    return image_pd

# 数据集
class dataset(data.Dataset):
    # 参数预定义
    def __init__(self, anno_pd, transforms=None,debug=False,test=False):
        # 图像路径
        self.paths = anno_pd['ImageName'].tolist()
        # 图像数字标签
        self.labels = anno_pd['label'].tolist()
        # 数字增强
        self.transforms = transforms
        # 程序调试
        self.debug=debug
        # 判定是否训练或测试
        self.test=test
    # 返回图片个数
    def __len__(self):
        return len(self.paths)
    # 获取每个图片
    def __getitem__(self, item):
        # 图像路径
        img_path =self.paths[item]
        # 读取
        img =cv2.imread(img_path)
        # 格式转换
        img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
        # 是否进行数据增强
        if self.transforms is not None:
            img = self.transforms(img)
        # 图像对应标签
        label = self.labels[item]
        # tensor和对应标签
        return torch.from_numpy(img).float(), int(label)

# 整理图片
def collate_fn(batch):
    imgs = []
    label = []
    for sample in batch:
        imgs.append(sample[0])
        label.append(sample[1])

    return torch.stack(imgs, 0), \
           label

get_image_pd(img_root='./image')

